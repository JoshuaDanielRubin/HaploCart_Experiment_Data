import re
sys.setrecursionlimit(10000)

IDS = ["X3a", "E1a1b", "V3", "S1a", "I2b", "F1a1", "U2e1b1", "L3b1", "P", "D1", "A2", "Z1a", "Y1b"] #["HV4b", "J2a1a1a1", "L2a1a3c", "T2e1a1b1", "L2a1j", "L1c2b", "L1c4b", "Q1", "C1b", "B2b3a", "L0a1a1", "numtS"]
IDS_NO_NUMT = ["X3a", "E1a1b", "V3", "S1a", "I2b", "F1a1", "U2e1b1", "L3b1", "P", "D1", "A2", "Z1a", "Y1b"] #["HV4b", "J2a1a1a1", "L2a1a3c", "T2e1a1b1", "L2a1j", "L1c2b", "L1c4b", "Q1", "C1b", "B2b3a", "L0a1a1"]
LENGTHS=["50", "100"]
NUMFRAGS=1000
REPLICATES = range(1)
RATES=["0.02", "0.03", "0.04", "0.05", "0.06", "0.07", "0.08", "0.09", "0.1", "0.2", "0.3"]
NUMT_RATIOS = ["200"]
MASKN=range(0, 16001, 1000)

ruleorder: numt_sim_bai > sim_bai
ruleorder: add_numt_r2 > add_numt_r1 > add_numt
ruleorder: subsamp_mt_numt_r2 > subsamp_mt_numt
ruleorder: subsamp_mt_numt_r1 > subsamp_mt_numt
ruleorder: haplocheck_sims > haplocheck_sims_numt

rule all:
    input:
        #expand("simulations/{id}_n{nfrag}_l{fraglen}_r1_rep{replicate}_s{rate}.fq.gz", id=["H2a2a1"], nfrag=NUMFRAGS, fraglen=LENGTHS, \ 
        #       rate=RATES, replicate=REPLICATES),
        #expand("simulations/{id}_n{nfrag}_l{fraglen}_r2_rep{replicate}_s{rate}.fq.gz", id=["H2a2a1"], nfrag=NUMFRAGS, fraglen=LENGTHS, \
        #       rate=RATES, replicate=REPLICATES),
        #expand("simulations/{id}_n{nfrag}_l{fraglen}_rep{replicate}_s{rate}.fq.gz", id=["H2a2a1"], nfrag=NUMFRAGS, fraglen=LENGTHS, \
        #        rate=RATES, replicate=REPLICATES),
        #expand("simulations/alignments/{id}_n{nfrag}_l{fraglen}_rep{replicate}_s{rate}_mem.bam", id=IDS_NO_NUMT, nfrag=NUMFRAGS, \ 
        #        fraglen=LENGTHS, rate=RATES, replicate=REPLICATES),
        #expand("simulations/alignments/{id}_n{nfrag}_l{fraglen}_rep{replicate}_s{rate}_mem.bam.bai", id=IDS_NO_NUMT, nfrag=NUMFRAGS, \
        #        fraglen=LENGTHS, rate=RATES, replicate=REPLICATES),
        #expand("simulations/alignments/numt/numtS_and_{id}_n{nfrag}_l{fraglen}_rep{replicate}_nr{numt_ratio}_s{rate}_mem.bam", id=IDS_NO_NUMT, \
        #       nfrag=NUMFRAGS, fraglen=LENGTHS, rate=RATES, replicate=REPLICATES, numt_ratio=NUMT_RATIOS),
        #expand("simulations/alignments/numt/numtS_and_{id}_n{nfrag}_l{fraglen}_rep{replicate}_nr{numt_ratio}_s{rate}_mem.bam.bai", id=IDS_NO_NUMT, \
        #       nfrag=NUMFRAGS, fraglen=LENGTHS, rate=RATES, replicate=REPLICATES, numt_ratio=NUMT_RATIOS),
        #expand("simulations/numtS_and_{id}_n{nfrag}_l{fraglen}_nr{numt_ratio}.fq.gz", id=IDS_NO_NUMT, nfrag=NUMFRAGS, \
        #        fraglen=LENGTHS, numt_ratio=NUMT_RATIOS),
        #expand("simulations/numtS_and_{id}_n{nfrag}_l{fraglen}_r1_nr{numt_ratio}.fq.gz", id=IDS_NO_NUMT, nfrag=NUMFRAGS, \
        #        fraglen=LENGTHS, numt_ratio=NUMT_RATIOS),
        #expand("simulations/numtS_and_{id}_n{nfrag}_l{fraglen}_r2_nr{numt_ratio}.fq.gz", id=IDS_NO_NUMT, nfrag=NUMFRAGS, \
        #        fraglen=LENGTHS, numt_ratio=NUMT_RATIOS),
        #expand("simulations/numtS_and_{id}_n{nfrag}_l{fraglen}_rep{replicate}_nr{numt_ratio}_s{rate}.fq.gz", id=IDS_NO_NUMT, nfrag=NUMFRAGS, \
        #        fraglen=LENGTHS, rate=RATES, numt_ratio=NUMT_RATIOS, replicate=REPLICATES),
        #expand("simulations/numtS_and_{id}_n{nfrag}_l{fraglen}_rep{replicate}_nr{numt_ratio}_s{rate}_r1.fq.gz", id=IDS_NO_NUMT, nfrag=NUMFRAGS, \
        #        fraglen=LENGTHS, rate=RATES, numt_ratio=NUMT_RATIOS, replicate=REPLICATES),
        #expand("simulations/numtS_and_{id}_n{nfrag}_l{fraglen}_rep{replicate}_nr{numt_ratio}_s{rate}_r2.fq.gz", id=IDS_NO_NUMT, nfrag=NUMFRAGS, \
        #        fraglen=LENGTHS, rate=RATES, numt_ratio=NUMT_RATIOS, replicate=REPLICATES),
        #expand("simulations/alignments/numt/numtS_and_{id}_n{nfrag}_l{fraglen}_rep{replicate}_nr{numt_ratio}_s{rate}_mem.bam", id=IDS_NO_NUMT, nfrag=NUMFRAGS, \ 
        #        fraglen=LENGTHS, rate=RATES, replicate=REPLICATES, numt_ratio=NUMT_RATIOS),
        #"simulations/thousand_genomes/haplocheck_results/sims/haplogroups/haplogroups.txt",
        "simulations/thousand_genomes/haplocheck_results/sims_numts/haplogroups/haplogroups.txt",
        #expand("../data/masklogs/{id}_{n}_{replicate}", id=IDS_NO_NUMT, n=MASKN, replicate=REPLICATES)
        #expand("simulations/mask/{id}_mask{n}_rep{replicate}.fa", id=IDS_NO_NUMT, n=MASKN, replicate=REPLICATES)

rule sim_bai:
    input: ancient("simulations/alignments/{id}_n{nfrag}_l{fraglen}_rep{replicate}_s{rate}_mem.bam")
    output: "simulations/alignments/{id}_n{nfrag}_l{fraglen}_rep{replicate}_s{rate}_mem.bam.bai"
    shell: "/home/ctools/samtools-1.13/samtools index {input} {output}"

rule numt_sim_bai:
    input: "simulations/alignments/numt/numtS_and_{id}_n{nfrag}_l{fraglen}_rep{replicate}_s{rate}_mem.bam"
    output: "simulations/alignments/numt/numtS_and_{id}_n{nfrag}_l{fraglen}_rep{replicate}_s{rate}_mem.bam.bai"
    shell: "/home/ctools/samtools-1.13/samtools index {input} {output}"

rule haplocheck_sims:
    input:  
             expand("simulations/alignments/{id}_n{nfrag}_l{fraglen}_rep{replicate}_s{rate}_mem.bam", id=IDS_NO_NUMT, nfrag=NUMFRAGS, \
                fraglen=LENGTHS, rate=RATES, replicate=REPLICATES),
             expand("simulations/alignments/{id}_n{nfrag}_l{fraglen}_rep{replicate}_s{rate}_mem.bam.bai", id=IDS_NO_NUMT, nfrag=NUMFRAGS, \
                fraglen=LENGTHS, rate=RATES, replicate=REPLICATES)
    output: "simulations/thousand_genomes/haplocheck_results/sims/haplogroups/haplogroups.txt"
    shell: "../dep/haplocheck/cloudgene run haplocheck@1.3.2 --threads 64 \
            --files /home/projects/mito_haplotype/vgan/src/simulations/alignments \
            --output /home/projects/mito_haplotype/vgan/src/simulations/thousand_genomes/haplocheck_results/sims --format bam"

rule haplocheck_sims_numt:
    input:  expand("simulations/alignments/numt/numtS_and_{id}_n{nfrag}_l{fraglen}_rep{replicate}_nr{numt_ratio}_s{rate}_mem.bam", id=IDS_NO_NUMT, nfrag=NUMFRAGS, \
                fraglen=LENGTHS, rate=RATES, replicate=REPLICATES, numt_ratio=NUMT_RATIOS),
            expand("simulations/alignments/numt/numtS_and_{id}_n{nfrag}_l{fraglen}_rep{replicate}_nr{numt_ratio}_s{rate}_mem.bam.bai", id=IDS_NO_NUMT, nfrag=NUMFRAGS, \
                fraglen=LENGTHS, rate=RATES, replicate=REPLICATES, numt_ratio=NUMT_RATIOS)
    output: "simulations/thousand_genomes/haplocheck_results/sims_numts/haplogroups/haplogroups.txt"
    shell: "../dep/haplocheck/cloudgene run haplocheck@1.3.2 --threads 64 \
           --files /home/projects/mito_haplotype/vgan/src/simulations/alignments/numt \
           --output /home/projects//mito_haplotype/vgan/src/simulations/thousand_genomes/haplocheck_results/sims_numts --format bam"

rule haplogrep_sims_mask:
    input: ancient("simulations/mask/{id}_mask{n}_rep{replicate}.fa")
    output: "../data/masklogs/{id}_{n}_{replicate}"
    shell: "touch ../data/masklogs/{wildcards.id}_{wildcards.n}_{wildcards.replicate}; \
            ../dep/haplogrep/haplogrep classify --phylotree 17 --in {input} --out simulations/thousand_genomes/haplocheck_results/mask/{wildcards.id}_mask{wildcards.n}_rep{wildcards.replicate} --format fasta"

rule mask:
    input: ancient("simulations/{id}.fa")
    output: "simulations/mask/{id}_mask{n}_rep{replicate}.fa"
    shell: "python ../tools/mask_fasta.py simulations/{wildcards.id}.fa simulations/mask/{wildcards.id}_mask{wildcards.n}_rep{wildcards.replicate}.fa {wildcards.n}"

#run mafft
rule runmafft:
    input:  "simulations/all.fasta"
    output:  "simulations/all_mafft.fasta"
    shell: "/storage/ctools/mafft-7.487-with-extensions/core/mafft-distance --auto {input} > {output}"

#run prank
rule runprank:
    input:  "simulations/all.fasta"
    output: "simulations/all_prank.best.fas"
    params:
        outprefix="simulations/all_prank"
    shell: "/home/ctools/prank-msa/src/prank -d={input} -showall -o={params.outprefix} -DNA"

rule faidx:
    input: "simulations/{id}.fa"
    output: "simulations/{id}.fa.fai"
    shell: "/home/ctools/samtools-1.13/samtools faidx {input}"

rule fragsim:
    input:
        input_1=ancient("simulations/{id}.fa"),
        input_2=ancient("simulations/{id}.fa.fai")
    output:
        "simulations/{id}_n{nfrags}_l{fraglen}.fa.gz"        
    wildcard_constraints:
        fraglen="\d+",
    shell:
        "/home/ctools/gargammel/src/fragSim  -n {wildcards.nfrags} -l {wildcards.fraglen} --circ {wildcards.id} {input.input_1} | gzip > {output}"

rule deamsim:
    input:
        "simulations/gen_{step}_n{nfrags}_l{fraglen}.fa.gz"
    output:
        "simulations/gen_{step}_n{nfrags}_l{fraglen}_d{dam}.fa.gz"
    wildcard_constraints:
        fraglen="\d+"
    shell:
        "/home/ctools/gargammel/src/deamSim  -matfile {wildcards.dam}  {input} | gzip > {output}"

rule adptsim:
    input:
        ancient("simulations/{id}_n{nfrags}_l{fraglen}.fa.gz")
    output:
        "simulations/{id}_n{nfrags}_l{fraglen}_adpt.fa"
    wildcard_constraints:
        fraglen="\d+",
    shell:
        "/home/ctools/gargammel/src/adptSim -l 125 -artp {output} {input}"

rule art:
    input:
        ancient("simulations/{id}_n{nfrags}_l{fraglen}_adpt.fa")
    output:
        "simulations/{id}_n{nfrags}_l{fraglen}_s1.fq",
        "simulations/{id}_n{nfrags}_l{fraglen}_s2.fq"
    wildcard_constraints:
        fraglen="\d+",
        replicate="\d+"
    params:
        out_prefix="simulations/{id}_n{nfrags}_l{fraglen}_s"
    shell:
        "/home/ctools/gargammel/art_src_MountRainier_Linux/art_illumina -ss HS25 -amp -na -p -l 125 -c 1   -i {input} -o {params.out_prefix}"

rule adptsimz:
    input:
        "simulations/{id}_n{nfrags}_l{fraglen}_adpt.fa"
    output:
        "simulations/{id}_n{nfrags}_l{fraglen}_adpt.fa.gz"
    wildcard_constraints:
        fraglen="\d+"
    shell:
        "gzip  {input}"

rule artz1:
    input:
        ancient("simulations/{id}_n{nfrags}_l{fraglen}_s1.fq")
    output:
        "simulations/{id}_n{nfrags}_l{fraglen}_s1.fq.gz"
    wildcard_constraints:
        fraglen="\d+",
        replicate="\d+"
    shell:
       "gzip {input}"

rule artz2:
    input:
        ancient("simulations/{id}_n{nfrags}_l{fraglen}_s2.fq")
    output:
        "simulations/{id}_n{nfrags}_l{fraglen}_s2.fq.gz"
    wildcard_constraints:
        fraglen="\d+",
        replicate="\d+"
    shell:
        "gzip {input}"

rule trimmed:
    input:
        input_1="simulations/{id}_n{nfrags}_l{fraglen}_s1.fq.gz",
        input_2="simulations/{id}_n{nfrags}_l{fraglen}_s2.fq.gz"
    output:
        output_1="simulations/{id}_n{nfrags}_l{fraglen}.fq.gz",
        output_2="simulations/{id}_n{nfrags}_l{fraglen}_r1.fq.gz",
        output_3="simulations/{id}_n{nfrags}_l{fraglen}_r2.fq.gz"
    params:
        out_prefix="simulations/{id}_n{nfrags}_l{fraglen}"
    wildcard_constraints:
        fraglen="\d+",
    shell:
        "/home/ctools/leeHom-1.2.15/src/leeHom -fq1 {input.input_1} -fq2 {input.input_2} -fqo {params.out_prefix}"

rule add_numt:
    input:
        input_1="simulations/{id}_n{nfrags}_l{fraglen}.fq.gz",
        input_2="simulations/numtS_n{nfrags}_l{fraglen}.fq.gz"
    output:
        "simulations/numtS_and_{id}_n{nfrags}_l{fraglen}_nr{numt_ratio}.fq.gz"
    shell:
        "../tools/add_numt.sh {input.input_1} {input.input_2} {wildcards.numt_ratio} {output}"

rule add_numt_r1:
    input:
        input_1="simulations/{id}_n{nfrags}_l{fraglen}_r1.fq.gz",
        input_2="simulations/numtS_n{nfrags}_l{fraglen}_r1.fq.gz"
    output:
        "simulations/numtS_and_{id}_n{nfrags}_l{fraglen}_r1_nr{numt_ratio}.fq.gz"
    shell:
        "../tools/add_numt.sh {input.input_1} {input.input_2} {wildcards.numt_ratio} {output}"

rule add_numt_r2:
    input:
        input_1="simulations/{id}_n{nfrags}_l{fraglen}_r2.fq.gz",
        input_2="simulations/numtS_n{nfrags}_l{fraglen}_r2.fq.gz"
    output:
        "simulations/numtS_and_{id}_n{nfrags}_l{fraglen}_r2_nr{numt_ratio}.fq.gz"
    shell:
        "../tools/add_numt.sh {input.input_1} {input.input_2} {wildcards.numt_ratio} {output}"

rule subsamp_mt:
    input: ancient("simulations/{id}_n{nfrags}_l{fraglen}.fq.gz")
    output: "simulations/{id}_n{nfrags}_l{fraglen}_rep{replicate}_s{rate}.fq.gz"
    wildcard_constraints:
        fraglen="\d+",
        id="(?!numt).+"
    shell: "/home/ctools/seqtk-1.3/seqtk sample -s {wildcards.replicate} {input} {wildcards.rate} |gzip > {output}"

rule subsamp_r1:
    input: ancient("simulations/{id}_n{nfrags}_l{fraglen}_r1.fq.gz")
    output: "simulations/{id}_n{nfrags}_l{fraglen}_r1_rep{replicate}_s{rate}.fq.gz"
    wildcard_constraints:
        fraglen="\d+",
        id="(?!numt).+"
    shell: "/home/ctools/seqtk-1.3/seqtk sample -s {wildcards.replicate} {input} {wildcards.rate} |gzip > {output}"

rule subsamp_r2:
    input: ancient("simulations/{id}_n{nfrags}_l{fraglen}_r2.fq.gz")
    output: "simulations/{id}_n{nfrags}_l{fraglen}_r2_rep{replicate}_s{rate}.fq.gz"
    wildcard_constraints:
        fraglen="\d+",
        id="(?!numt).+"
    shell: "/home/ctools/seqtk-1.3/seqtk sample -s {wildcards.replicate} {input} {wildcards.rate} |gzip > {output}"

rule subsamp_mt_numt:
    input: ancient("simulations/numtS_and_{id}_n{nfrags}_l{fraglen}_nr{numt_ratio}.fq.gz")
    output: "simulations/numtS_and_{id}_n{nfrags}_l{fraglen}_rep{replicate}_nr{numt_ratio}_s{rate}.fq.gz"
    wildcard_constraints:
        fraglen="\d+",
    shell: "/home/ctools/seqtk-1.3/seqtk sample -s {wildcards.replicate} {input} {wildcards.rate} |gzip > {output}"

rule subsamp_mt_numt_r1:
    input: ancient("simulations/numtS_and_{id}_n{nfrags}_l{fraglen}_r1_nr{numt_ratio}.fq.gz")
    output: "simulations/numtS_and_{id}_n{nfrags}_l{fraglen}_rep{replicate}_nr{numt_ratio}_s{rate}_r1.fq.gz"
    wildcard_constraints:
        fraglen="\d+",
    shell: "/home/ctools/seqtk-1.3/seqtk sample -s {wildcards.replicate} {input} {wildcards.rate} |gzip > {output}"

rule subsamp_mt_numt_r2:
    input: ancient("simulations/numtS_and_{id}_n{nfrags}_l{fraglen}_r2_nr{numt_ratio}.fq.gz")
    output: "simulations/numtS_and_{id}_n{nfrags}_l{fraglen}_rep{replicate}_nr{numt_ratio}_s{rate}_r2.fq.gz"
    wildcard_constraints:
        fraglen="\d+",
    shell: "/home/ctools/seqtk-1.3/seqtk sample -s {wildcards.replicate} {input} {wildcards.rate} |gzip > {output}"


# mapping to the reference 

#bwa mem

rule bwa:
    input:
        input_1=ancient("simulations/{id}_n{nfrags}_l{fraglen}_rep{replicate}_s{rate}.fq.gz"),
        input_2=ancient("simulations/{id}_n{nfrags}_l{fraglen}_r1_rep{replicate}_s{rate}.fq.gz"),
        input_3=ancient("simulations/{id}_n{nfrags}_l{fraglen}_r2_rep{replicate}_s{rate}.fq.gz")
    output: "simulations/alignments/{id}_n{nfrags}_l{fraglen}_rep{replicate}_s{rate}_mem.bam"
    wildcard_constraints:
        fraglen="\d+",
        id="(?!numt/).+"
    shell: "/home/ctools/interleave_fastq/interleavefastq.sh {input.input_1} {input.input_2} {input.input_3} | \
           /home/ctools/bwa-0.7.17/bwa mem -p /home/projects/benchmarkmito/bwaindex/gen_0.fa  /dev/stdin | \
           /home/ctools/samtools-1.13/samtools sort /dev/stdin > {output}"

rule bwa_numt:
    input:
        input_1="simulations/numtS_and_{id}_n{nfrags}_l{fraglen}_rep{replicate}_nr{numt_ratio}_s{rate}.fq.gz",
        input_2="simulations/numtS_and_{id}_n{nfrags}_l{fraglen}_rep{replicate}_nr{numt_ratio}_s{rate}_r1.fq.gz",
        input_3="simulations/numtS_and_{id}_n{nfrags}_l{fraglen}_rep{replicate}_nr{numt_ratio}_s{rate}_r2.fq.gz"
    output: "simulations/alignments/numt/numtS_and_{id}_n{nfrags}_l{fraglen}_rep{replicate}_nr{numt_ratio}_s{rate}_mem.bam"
    wildcard_constraints:
        fraglen="\d+",
        id="(?!numt/).+"
    shell: "/home/ctools/interleave_fastq/interleavefastq.sh {input.input_1} {input.input_2} {input.input_3} | \
           /home/ctools/bwa-0.7.17/bwa mem -t 60 -p /home/projects/benchmarkmito/bwaindex/gen_0.fa  /dev/stdin | \
           /home/ctools/samtools-1.13/samtools sort /dev/stdin > {output}" 


